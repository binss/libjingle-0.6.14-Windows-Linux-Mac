1. Introduction

Libjingle is a set of components provided by Google to implement Jingle
protocols XEP-166 (http://xmpp.org/extensions/xep-0166.html) and XEP-167
(http://xmpp.org/extensions/xep-0167.html). Libjingle is also backward
compatible with Google Talk Call Signaling
(http://code.google.com/apis/talk/call_signaling.html). This package will
create several static libraries you may link to your projects as needed.

-talk               - No source files in talk/, just these subdirectories
|-base              - Contains basic low-level portable utility functions for
|                     things like threads and sockets
|-p2p               - The P2P stack
  |-base            - Base p2p functionality
  |-client          - Hooks to tie it into XMPP
|-session           - Signaling
  |-phone           - Signaling code specific to making phone calls
    |-testdata      - Samples of RTP voice and video dump
  |-tunnel          - Tunnel session and channel
|-third_party       - Folder for third party libraries
  |-libudev         - Folder containing libudev.h
|-xmllite           - XML parser
|-xmpp              - XMPP engine

In addition, this package contains two examples in talk/examples which
illustrate the basic concepts of how the provided classes work.

2. How to Build

2.1 Prerequisites

  * Install Python 2.4 or later from http://www.python.org/.
    Please note that since swtoolkit only works with Python 2.x, you will
    not be able to use Python 3.x.
    
    python --version to confirm that python is in your path, and 2.4 or greater.

2.2 Build

    2.2.1 Build Libjingle under Linux or OS X
    
        Some optional new features in OpenSSL are only available in OpenSSL v1.0
        and above. To build with new OpenSSL features, you need to add the
        "HAS_OPENSSL_1_0" to the cppdefine under the
        "talk.Library(env, name = jingle..." section in the "libjingle.scons" file.
    
        Run the build script /talk/build.sh 
        This script will download, patch and install all dependencies needed to build 
        Libjingle.
    
    2.2.2 Build Libjingle under Windows
        
        Unfortunately, no build script has been written yet. (TODO)
        So, We need to do it manually.
        
        * Make sure you have Visual Studio.
          You cannot use Express Version of visual studio after VS2005 version because 
          the needed ATL has been remove from Express Version since VS2008.
        
        * Install download and install Openssl v1.0.0 from 
          http://slproweb.com/download/Win32OpenSSL-1_0_0n.exe
          
        * Download the stand alone scons-local zip package 2.0.1
          http://downloads.sourceforge.net/project/scons/scons-src/2.0.1/scons-local-2.0.1.zip
          and unzip it to /talk/third_party/
          so that your folder structure looks like:
          ...\talk\third_party\scons-local-2.0.1\SCons\...
          
        * Download  swtoolkit zip package from https://swtoolkit.googlecode.com/files/swtoolkit.0.9.1.zip
          and unzip it to /talk/third_party/
          so that your folder structure looks like:
          ...\talk\third_party\swtoolkit\...
          
          For Visual studio version after 2008, you will need to modify the file:
          \talk\third_party\swtoolkit\site_scons\site_tools\target_platform_windows.py
          
          For VS2010: Change the line 
            LINKFLAGS_OPTIMIZED=['/PDBPATH:none'],
            to
            LINKFLAGS_OPTIMIZED=['/PDBALTPATH:%_PDB%'],
            
          For Visual studio version after 2010 remove the line 
            LINKFLAGS_OPTIMIZED=['/PDBPATH:none'],
          
        * Download the google test framework zip package from
          https://googletest.googlecode.com/files/gtest-1.7.0.zip
          Unzip it to /talk/third_party/ and rename it gtest 
          to have your folder structure looks like:
          ...\talk\third_party\gtest instead of ...\talk\third_party\gtest-1.7.0
          
        * Download srtp zip package from  
          http://libjingle.googlecode.com/files/srtp-cvs.zip
          Unzip it to /talk/third_party/ and rename it strp
          so that, your folder structure looks like:
          ...\talk\third_party\strp

        * Download expat zip package from  
          http://sourceforge.net/projects/expat/files/expat/2.0.1/expat-2.0.1.tar.gz
          Untar it to /talk/third_party/
          so that, your folder structure looks like:
          ...\talk\third_party\expat-2.0.1\...
          
        * In the Visual Studio Command Prompt do the following step: 
             - go to the talk\ directory 
                cd "path-to-libjingle/talk/"
             - set the SCONS_DIR  and PATH_TO_SWTOOLKIT environment variables
                set SCONS_DIR="path-to-libjingle/third_party/scons-local-2.0.1"
                set PATH_TO_SWTOOLKIT="path-to-libjingle/third_party/swtoolkit"
             - run the hammer.bat script to begin the build
                %PATH_TO_SWTOOLKIT%\hammer.bat
                    or to build opt and dbg all programs
                %PATH_TO_SWTOOLKIT%\hammer.bat --jobs=6 --verbose --mode=all all_programs
         
                Note: To be able to build in parallel (--jobs=6) you'll need to 
                install PyWin32 from http://sourceforge.net/projects/pywin32/
        
        * Enjoy the compilation time.

The built binaries are under talk/build/dbg/staging or talk/build/opt/staging,
depending on the build mode. When the build is complete, you can run the
examples, login or call. For the call sample, you can specify the input and
output RTP dump for voice and video. This package provides two samples of input
RTP dump: voice.rtpdump is a single channel, 16Khz voice encoded with G722, and
video.rtpdump is 320x240 video encoded with H264 AVC at 30 frames per second.
These provided samples will inter-operate with Google Talk Video. If you use
other input RTP dump, you may need to change the codecs in call_main.cc, lines
215 - 222.

Libjingle also builds two server tools, a relay server and a STUN server. The
relay server may be used to relay traffic when a direct peer-to-peer connection
could not be established. The STUN Server implements the STUN protocol for
Simple Traversal of UDP over NAT. See the Libjingle Developer Guide at
http://code.google.com/apis/talk/index.html for information about configuring a
client to use this relay server and this STUN server.

To use LinphoneMediaEngine, you need to perform the following additional steps:
  * Download and install the "MediaStreamer" library on your
    machine.
  * Add the following lines into the libjingle.scons file.
    In the "talk.Library(env, name = "libjingle",..." section, you need to add:
      "HAVE_LINPHONE",
      "HAVE_SPEEX",
      "HAVE_ILBC",
    to the "cppdefines = [".

    In the "talk.App(env, name = "call",..." section, you need to add:
      "mediastreamer",
    to the "libs = [".
  * In the libjingle.scons file, add the following line into the "srcs = [ ..."
    section of the "libjingle" Library.
      "session/phone/linphonemediaengine.cc",
